# SPDX-FileCopyrightText: 2025 Thomas Mathys
# SPDX-License-Identifier: MIT

name: Linux Builds

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Linux Builds (${{matrix.cxx_compiler}}, ${{matrix.build_type}})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        cxx_compiler: [clang++, g++-14]
        build_type: [Release, Debug]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # TODO: do we want to set up a build directory?
    # TODO: do we need to install Ninja?
    - name: Configure
      run: >
        cmake
        --preset dev-linux-ninja
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

  # TODO: set name (based on matrix)

# TODO: port stuff below



#     - name: Install Ninja
#       uses: seanmiddleditch/gha-setup-ninja@master

#     - name: Set reusable strings
#       # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
#       id: strings
#       shell: bash
#       run: |
#         echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: >
#         cmake -B ${{ steps.strings.outputs.build-output-dir }}
#         --preset ${{ matrix.cmake_preset }}
#         ${{ matrix.cmake_arch }}
#         -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#         -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#         -S ${{ github.workspace }}

#     - name: Build
#       # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#     - name: Test
#       working-directory: ${{ steps.strings.outputs.build-output-dir }}
#       # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest --build-config ${{ matrix.build_type }}
